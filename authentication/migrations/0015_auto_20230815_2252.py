# Generated by Django 4.1.4 on 2023-08-15 22:52
import json

from django.db import migrations


from authentication.models import CollaboratorDoctor, Clinic
from footerlabels.models import MedicalUnityTypes, MedicalFacilities, ClinicSpecialities, AcademicDegree, Speciality, \
    MedicalSkills


def load_data_from_py(apps, schema_editor):
    file_path = 'authentication/csv/doctors_'
    for i in range(0,3):
        index = i+1
        complete = file_path + str(index) + '.json'
        with open(complete, 'r') as json_file:
            doctors = json.load(json_file)
        for doc in doctors:
            doctor_name = doc.get('doctor_name', '')
            try:
                first_name = doctor_name.split(' ')[0]
                last_name = doctor_name.split(' ')[1]
            except Exception:
                first_name = ''
                last_name = ''
            specialitate = doc.get('specialitate', '')
            medic_type = doc.get('medic_type', '')
            competente = doc.get('competente', '')
            doctor_clinics = doc.get('doctor_clinics', '')
            doc_model = CollaboratorDoctor(
                first_name=first_name,
                last_name=last_name,
                step=5,
                is_visible=True,
                is_notification_email_send=True
            )

            doc_model.save()

            if medic_type:
                try:
                    mut_obj = AcademicDegree.objects.get(label=medic_type)
                    doc_model.academic_degree.add(mut_obj)
                except AcademicDegree.DoesNotExist as e:
                    mut_obj = AcademicDegree.objects.create(label=medic_type)
                    doc_model.academic_degree.add(mut_obj)
            else:
                try:
                    mut_obj = AcademicDegree.objects.get(label='Medic Rezident')
                    doc_model.academic_degree.add(mut_obj)
                except AcademicDegree.DoesNotExist as e:
                    mut_obj = AcademicDegree.objects.create(label='Medic Rezident')
                    doc_model.academic_degree.add(mut_obj)

            if specialitate:
                for spec in specialitate:
                    try:
                        fac_obj = Speciality.objects.get(label=spec)
                        doc_model.speciality.add(fac_obj)
                    except Speciality.DoesNotExist as e:
                        fac_obj = Speciality.objects.create(label=spec)
                        doc_model.speciality.add(fac_obj)

            if competente:
                for fac in competente:
                    try:
                        fac_obj = MedicalSkills.objects.get(label=fac)
                        doc_model.medical_skill.add(fac_obj)
                    except MedicalSkills.DoesNotExist as e:
                        fac_obj = MedicalSkills.objects.create(label=fac)
                        doc_model.medical_skill.add(fac_obj)

            if doctor_clinics:
                for cc in doctor_clinics:
                    try:
                        fac_obj = Clinic.objects.get(clinic_name=cc)
                        doc_model.collaborator_clinic.add(fac_obj)
                    except Clinic.DoesNotExist as e:
                        pass
                    except Exception as e:
                        pass

            doc_model.save()


class Migration(migrations.Migration):

    dependencies = [
        ('authentication', '0014_auto_20230801_1229'),
    ]

    operations = [
        migrations.RunPython(load_data_from_py),
    ]
